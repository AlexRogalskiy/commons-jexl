/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


options
{
   MULTI=true;
   STATIC=false;
   VISITOR=true;
   NODE_SCOPE_HOOK=true;
   NODE_CLASS="JexlNode";
   UNICODE_INPUT=true;
   KEEP_LINE_COLUMN=true;
   TRACK_TOKENS=true;
   //DEBUG_PARSER=true;
   //DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(Parser)

package org.apache.commons.jexl3.parser;

import java.util.Collections;
import java.util.LinkedList;

import org.apache.commons.jexl3.JexlInfo;
import org.apache.commons.jexl3.JexlFeatures;
import org.apache.commons.jexl3.JexlException;
import org.apache.commons.jexl3.internal.Scope;

public final class Parser extends JexlParser
{
    private int loopCount = 0;
    private int forLoopCount = 0;

    public ASTJexlScript parse(JexlInfo info, JexlFeatures jexlFeatures, String jexlSrc, Scope scope) {
        JexlFeatures previous = getFeatures();
        try {
            setFeatures(jexlFeatures);
            // If registers are allowed, the default parser state has to be REGISTERS.
            if (jexlFeatures.supportsRegister()) {
                token_source.defaultLexState = REGISTERS;
            }
            // lets do the 'Unique Init' in here to be safe - it's a pain to remember
            source = jexlSrc;
            pragmas = null;
            frame = scope;
            ReInit(new java.io.StringReader(jexlSrc));
            ASTJexlScript script = jexlFeatures.supportsScript()? JexlScript(scope) : JexlExpression(scope);
            script.jjtSetValue(info);
            script.setPragmas(pragmas != null
                             ? Collections.<String,Object>unmodifiableMap(pragmas)
                             : Collections.<String,Object>emptyMap());
            pragmas = null;
            return script;
        } catch (TokenMgrError xtme) {
            throw new JexlException.Tokenization(info, xtme).clean();
        } catch (ParseException xparse) {
            throw new JexlException.Parsing(info, xparse).clean();
        } finally {
            source = null;
            frame = null;
            token_source.defaultLexState = DEFAULT;
            setFeatures(previous);
        }
    }
}

PARSER_END(Parser)

TOKEN_MGR_DECLS : {
    /**
     *   A stack of 1 for keeping state to deal with doted identifiers
     */
    int dotLexState = DEFAULT;

    public void pushDot() {
        dotLexState = curLexState;
        curLexState = DOT_ID;
    }

    public void popDot() {
        if (curLexState == DOT_ID) {
            curLexState = dotLexState;
            dotLexState = defaultLexState;
        }
    }
}
/***************************************
 *     Skip & Number literal tokens
 ***************************************/

<*> SKIP : /* WHITE SPACE */
{
      <"##" (~["\n","\r"])* ("\n" | "\r" | "\r\n")? >
    | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
    | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")? >
    | " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
}

<*> TOKEN : /* KEYWORDS */
{
      < IF : "if" >
    | < ELSE : "else" >
    | < FOR : "for" >
    | < WHILE : "while" >
    | < DO : "do" >
    | < TRY : "try" >
    | < CATCH : "catch" >
    | < FINALLY : "finally" >
    | < THROW : "throw" >
    | < NEW : "new" >
    | < VAR : "var" >
    | < EMPTY : "empty" > { popDot(); } /* Revert state to default if was DOT_ID. */
    | < SIZE : "size" > { popDot(); } /* Revert state to default if was DOT_ID. */
    | < THIS : "this" >
    | < NULL : "null" | "\u2205" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < RETURN : "return" >
    | < FUNCTION : "function" >
    | < LAMBDA : "->" | "\u2192" >
    | < LAMBDAE : "=>" | "\u21D2" >
    | < BREAK : "break" >
    | < CONTINUE : "continue" >
    | < REMOVE : "remove" > { popDot(); } /* Revert state to default if was DOT_ID. */
    | < PRAGMA : "#pragma" >
}

<*> TOKEN : { /* SEPARATORS */
      < LPAREN : "(" >
    | < RPAREN : ")" >
    | < LCURLY : "{" >
    | < RCURLY : "}" >
    | < LBRACKET : "[" >
    | < RBRACKET : "]" >
    | < SEMICOL : ";" >
    | < COLON : ":" >
    | < COMMA : "," >
    | < DOT : "." > { pushDot(); } /* Lexical state is now DOT_ID */
    | < QDOT : "?." > { pushDot(); } /* Lexical state is now DOT_ID */
    | < ELLIPSIS : "..." | "\u2026">
    | < HBRACKET : "#[" >
    | < HCURLY : "#{" >
}

<*> TOKEN : { /* STREAMS */
      < DOTP : ".(" >
    | < DOTB : ".[" >
    | < DOTC : ".{" >
    | < DOTS : ".@" >
}

<*> TOKEN : { /* CONDITIONALS */
      < QMARK : "?" >
    | < ELVIS : "?:" >
    | < NULLP : "??" >
    | < AND : "&&" | "and" | "\u2227" >
    | < OR : "||" | "or" | "\u2228" >
}

<*> TOKEN : { /* COMPARISONS */
      < eq : "==" | "eq" | "\u2261">
    | < ne : "!=" | "ne" | "\u2260" >
    | < req : "=~" | "in" | "\u2208" > // regexp equal
    | < rne : "!~" | "!in" | "\u2209" > // regexp not equal
    | < seq : "=^" > // starts equal
    | < eeq : "=$" > // ends equal
    | < sne : "!^" > // start not equal
    | < ene : "!$" > // ends not equal
    | < gt : ">" | "gt" >
    | < ge : ">=" | "ge" | "\u2265" >
    | < lt : "<" | "lt" >
    | < le : "<=" | "le" | "\u2264" >
}

<*> TOKEN : { /* OPERATORS */
      < plus_assign : "+=" >
    | < minus_assign : "-=" >
    | < mult_assign : "*=" >
    | < div_assign : "/=" >
    | < mod_assign : "%=" >
    | < and_assign : "&=" >
    | < or_assign : "|=" >
    | < xor_assign : "^=" >

    | < assign : "=" >
    | < plus : "+" >
    | < minus : "-" >
    | < unary_minus : "\u2212" >
    | < mult : "*" | "\u22C5" >
    | < div : "/" | "div" >
    | < mod : "%" | "mod" >
    | < not : "!" | "not" | "\u00AC" >
    | < and : "&" >
    | < or : "|" >
    | < xor : "^" >

    | < tilda : "~" >
    | < range : ".." | "\u2025" >
}

/***************************************
 *     Identifier & String tokens
 ***************************************/
<*> TOKEN :  /* NaN */
{
    < NAN_LITERAL : "NaN" >
}

<*> TOKEN : /* ANNOTATION */
{
  < ANNOTATION: "@" ( [ "0"-"9", "a"-"z", "A"-"Z", "_", "$" ])+ >
}

<DOT_ID> TOKEN : /* IDENTIFIERS */
{
  < DOT_IDENTIFIER: ( [ "0"-"9", "a"-"z", "A"-"Z", "_", "$", "@" ])+ > { popDot(); } /* Revert state to default. */
}

<DEFAULT, REGISTERS> TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|<ESCAPE>)* > { matchedToken.image = StringParser.unescapeIdentifier(matchedToken.image); }
|
  < #LETTER: [ "a"-"z", "A"-"Z", "_", "$", "@" ] >
|
  < #DIGIT: [ "0"-"9"] >
|
  < #ESCAPE: "\\" [" ", "'", "\"", "\\"] >
}

<REGISTERS> TOKEN : /* REGISTERS: parser.ALLOW_REGISTER must be set to true before calling parse */
{
  < REGISTER: "#" (["0"-"9"])+ >
}

<DEFAULT, REGISTERS> TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
      ( "0" (["0"-"7"])* | ["1"-"9"] (["0"-"9"])* | "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ )
      (["l","L","h","H"])?
  >
 |
  < FLOAT_LITERAL:
    "#NaN"
    |
    (<DIGIT>)+ "." (<DIGIT>)+ ((["e","E"])(["+","-"])?(<DIGIT>)+)? (["d","D","f","F","b","B"])?
    |
    (<DIGIT>)+ (".")? ((["e","E"])(["+","-"])?(<DIGIT>)+)? ["d","D","f","F","b","B"]
  >
}

<*> TOKEN :
{
  < STRING_LITERAL:
    "\"" (~["\"","\\","\n","\r","\u2028","\u2029"] | "\\" ~["\n","\r","\u2028","\u2029"])* "\""
  |
    "'" (~["'","\\","\n","\r","\u2028","\u2029"] | "\\" ~["\n","\r","\u2028","\u2029"])* "'"
  > { popDot(); } /* Revert state to default if was DOT_ID. */
}

<*> TOKEN :
{
  < JXLT_LITERAL:
    "`" (~["`","\\"] | "\\" ~["\u0000"])* "`"
  > { popDot(); } /* Revert state to default if was DOT_ID. */
}

<*> TOKEN :
{
  < REGEX_LITERAL:
    "~" "/" (~["/","\n","\r","\u2028","\u2029"] | "\\" "/" )* "/"
  > { popDot(); } /* Revert state to default if was DOT_ID. */
}

/***************************************
 *      Statements
 ***************************************/

ASTJexlScript JexlScript(Scope frame) : {
    jjtThis.setScope(frame);
}
{
   LOOKAHEAD( LambdaLookahead() ) Lambda() (LOOKAHEAD(1) <SEMICOL>)? <EOF> { return jjtThis.script(); }
   |
   ( ( Statement() )*) <EOF> { return jjtThis.script(); }
}

ASTJexlScript JexlExpression(Scope frame) #JexlScript : {
    jjtThis.setScope(frame);
}
{
   ( Expression() )? <EOF>
   {
        return jjtThis.script();
   }
}

void Annotation() #Annotation :
{
    Token t;
}
{
    t=<ANNOTATION> (LOOKAHEAD(<LPAREN>) Arguments() )? { jjtThis.setName(t.image); }
}

void AnnotatedStatement() #AnnotatedStatement() : {}
{
    (LOOKAHEAD(<ANNOTATION>) Annotation())+ (LOOKAHEAD(<VAR>) Var() | LOOKAHEAD(1) Block() | Expression())
}

void Statement() #void : {}
{
    <SEMICOL>
    | LOOKAHEAD(<ANNOTATION>) AnnotatedStatement()
    | LOOKAHEAD(<LCURLY> Expression() <SEMICOL>) Block() // to disambiguate the set literals
    | LOOKAHEAD(<LCURLY> Statement() <SEMICOL>) Block() //  to disambiguate the set literals
    | IfStatement()
    | ForeachStatement()
    | WhileStatement()
    | DoWhileStatement()
    | TryStatement()
    | ThrowStatement()
    | LOOKAHEAD(2) ExpressionStatement()
    | ReturnStatement()
    | Continue()
    | Remove()
    | Break()
    | Var()
    | Pragma()
}

void Block() #Block : {}
{
    <LCURLY> ( Statement() )* <RCURLY>
}

void ExpressionStatement() : {}
{
    Expression() (LOOKAHEAD(2) Expression() #Ambiguous())* (LOOKAHEAD(1) <SEMICOL>)?
}

void IfStatement() : {}
{
    <IF> <LPAREN> Expression() <RPAREN>  (LOOKAHEAD(1) Block() | Statement())
    ( LOOKAHEAD(2) <ELSE> <IF> <LPAREN> Expression() <RPAREN> (LOOKAHEAD(1) Block() | Statement()) )*
    ( LOOKAHEAD(1) <ELSE>  (LOOKAHEAD(1) Block() | Statement()) )?
}

void WhileStatement() : {}
{
    <WHILE> <LPAREN> Expression() <RPAREN>  { loopCount += 1; }  (LOOKAHEAD(1) Block() | Statement()) { loopCount -= 1; }
}

void DoWhileStatement() : {}
{
    <DO> { loopCount += 1; } (LOOKAHEAD(1) Block() | Statement()) <WHILE> <LPAREN> Expression() <RPAREN> { loopCount -= 1; }
}

void TryStatement() : {}
{
    <TRY> Block() ( (<CATCH> <LPAREN> CatchVar() <RPAREN> Block() (<FINALLY> Block())?) | <FINALLY> Block() )
}

void CatchVar() : {}
{
    <VAR> DeclareVar()
    |
    Identifier()
}

void ThrowStatement() : {}
{
    <THROW> Expression()
}

void ReturnStatement() : {}
{
    <RETURN> ExpressionStatement()
}

void Continue() #Continue : {}
{
    <CONTINUE> { if (loopCount == 0 && forLoopCount == 0) { throwParsingException(jjtThis); } }
}

void Remove() #Remove : {}
{
    <REMOVE> { if (forLoopCount == 0) { throwParsingException(jjtThis); } }
}

void Break() #Break : {}
{
    <BREAK> { if (loopCount == 0 && forLoopCount == 0) { throwParsingException(jjtThis); } }
}

void ForeachStatement() : {}
{
    <FOR> <LPAREN> ForeachVar() <COLON> Expression() <RPAREN> { forLoopCount += 1; } (LOOKAHEAD(1) Block() | Statement()) { forLoopCount -= 1; }
}

void ForeachVar() : {}
{
    <VAR> DeclareVar() (LOOKAHEAD(1) <COMMA> DeclareForVar())?
    |
    Identifier() (LOOKAHEAD(1) <COMMA> Identifier())?
}

void Var() #void : {}
{
    <VAR> DeclareVar() (LOOKAHEAD(1) <assign> Expression() #Assignment(2))?
}

void DeclareVar() #Var :
{
    Token t;
}
{
    t=<IDENTIFIER> { declareVariable(jjtThis, t); }
}

void DeclareForVar() #ForVar :
{
    Token t;
}
{
    t=<IDENTIFIER> { declareVariable(jjtThis, t); }
}

void Pragma() #void :
{
    LinkedList<String> lstr = new LinkedList<String>();
    Object value;
}
{
<PRAGMA> pragmaKey(lstr)  value=pragmaValue() { declarePragma(stringify(lstr), value); }
}

void pragmaKey(LinkedList<String> lstr) #void :
{
    Token t;
}
{
    t=<IDENTIFIER> (LOOKAHEAD(2) <DOT> pragmaKey(lstr) )* { lstr.addFirst(t.image); }
}

Object pragmaValue() #void :
{
Token v;
LinkedList<String> lstr = new LinkedList<String>();
}
{
      LOOKAHEAD(1) v=<INTEGER_LITERAL> { return NumberParser.parseInteger(v.image); }
    | LOOKAHEAD(1) v=<FLOAT_LITERAL> { return NumberParser.parseDouble(v.image); }
    | LOOKAHEAD(1) v=<STRING_LITERAL> { return Parser.buildString(v.image, true); }
    | LOOKAHEAD(1)  pragmaKey(lstr) { return stringify(lstr); }
    | LOOKAHEAD(1) <TRUE> { return true; }
    | LOOKAHEAD(1) <FALSE> { return false; }
    | LOOKAHEAD(1) <NULL> { return null; }
    | LOOKAHEAD(1) <NAN_LITERAL> { return Double.NaN; }
}


/***************************************
 *      Expression syntax
 ***************************************/

void Expression() #void : {}
{
  AssignmentExpression()
}

void AssignmentExpression() #void : {}
{
  ConditionalExpression()
  ( LOOKAHEAD(2) (
    <plus_assign> Expression() #SetAddNode(2)
    |
    <mult_assign> Expression() #SetMultNode(2)
    |
    <div_assign> Expression() #SetDivNode(2)
    |
    <mod_assign> Expression() #SetModNode(2)
    |
    <and_assign> Expression() #SetAndNode(2)
    |
    <or_assign> Expression() #SetOrNode(2)
    |
    <xor_assign> Expression() #SetXorNode(2)
    |
    <minus_assign> Expression() #SetSubNode(2)
    |
    <assign> Expression() #Assignment(2)
  ) )*
}

/***************************************
 *      Conditional & relational
 ***************************************/

void ConditionalExpression() #void : {}
{
  ConditionalOrExpression()
  ( LOOKAHEAD(2) (
    <QMARK> TernaryExpression() 
    |
    <ELVIS> Expression() #ElvisNode(2)
    |
    <NULLP> Expression() #NullpNode(2)
  ) )?
}

void TernaryExpression() #void : {}
{
  LOOKAHEAD(Expression() <COLON>) Expression() <COLON> Expression() #TernaryNode(3)
  |
  Expression() #TernaryNode(2)
}

void ConditionalOrExpression() #void : {}
{
  ConditionalAndExpression()
  ( LOOKAHEAD(2) (
     <OR> ConditionalAndExpression() #OrNode(2)
  ) )*
}

void ConditionalAndExpression() #void : {}
{
  InclusiveOrExpression()
  ( LOOKAHEAD(2) (
     <AND> InclusiveOrExpression() #AndNode(2)
  ) )*
}

void InclusiveOrExpression() #void : {}
{
  ExclusiveOrExpression()
  ( LOOKAHEAD(2) (
     <or> ExclusiveOrExpression() #BitwiseOrNode(2)
  ) )*
}

void ExclusiveOrExpression() #void : {}
{
  AndExpression()
  ( LOOKAHEAD(2) (
     <xor> AndExpression() #BitwiseXorNode(2)
  ) )*
}

void AndExpression() #void : {}
{
  EqualityExpression()
  ( LOOKAHEAD(2) (
     <and> EqualityExpression() #BitwiseAndNode(2)
  ) )*
}

void EqualityExpression() #void : {}
{
  RelationalExpression()
  ( LOOKAHEAD(2) (
     <eq> RelationalExpression() #EQNode(2)
   |
     <ne> RelationalExpression() #NENode(2)
   |
     <range> RelationalExpression() #RangeNode(2) // range
  ) )?
}

void RelationalExpression() #void : {}
{
  AdditiveExpression()
  ( LOOKAHEAD(2) (
    <lt> AdditiveExpression() #LTNode(2)
   |
    <gt> AdditiveExpression() #GTNode(2)
   |
    <le> AdditiveExpression() #LENode(2)
   |
    <ge> AdditiveExpression() #GENode(2)
   |
    <req> AdditiveExpression() #ERNode(2) // equals regexp
   |
    <rne> AdditiveExpression() #NRNode(2) // not equals regexp
   |
    <seq> AdditiveExpression() #SWNode(2) // starts with
   |
    <sne> AdditiveExpression() #NSWNode(2) // not starts with
   |
    <eeq> AdditiveExpression() #EWNode(2) // ends with
   |
    <ene> AdditiveExpression() #NEWNode(2) // not ends with
  ) )?
}

/***************************************
 *      Arithmetic
 ***************************************/

void AdditiveExpression() #void : {}
{
  MultiplicativeExpression()
  ( LOOKAHEAD(2) (
    <plus> MultiplicativeExpression() #AddNode(2)
  |
    <minus> MultiplicativeExpression() #SubNode(2)
  ) )*
}

void MultiplicativeExpression() #void : {}
{
  UnaryExpression()
  ( LOOKAHEAD(2) (
    <mult> UnaryExpression() #MulNode(2)
  |
    <div> UnaryExpression() #DivNode(2)
  |
    <mod> UnaryExpression() #ModNode(2)
  ) )*
}

void UnaryExpression() #void : {}
{
  <minus> UnaryExpression() #UnaryMinusNode(1)
  |
  <unary_minus> UnaryExpression() #UnaryMinusNode(1)
  |
  <tilda> UnaryExpression() #BitwiseComplNode(1)
  |
  <not> UnaryExpression() #NotNode(1)
  |
  <EMPTY> UnaryExpression() #EmptyFunction(1)
  |
  <SIZE> UnaryExpression() #SizeFunction(1)
  |
  <ELLIPSIS> EnumerationExpression()
  |
  InlinePropertyExpression()
}

void EnumerationExpression() #void : {}
{
    ((IteratorExpression() (LOOKAHEAD(2) EnumerationAccess() )*) #EnumerationReference(>1) (LOOKAHEAD(<DOTS>) Reduction())?) #Reference(>1)
}

void EnumerationAccess() #void : {}
{
    LOOKAHEAD(<DOTB>) ArrayProjection()
    |
    LOOKAHEAD(<DOTC>) MapProjection()
    |
    LOOKAHEAD(<DOTP>) Selection()
}

void Reduction() #ReductionNode : {}
{
    <DOTS> <LPAREN> [LOOKAHEAD(Expression() <COLON>) Expression() <COLON>] Lambda() <RPAREN>
}

void Selection() #SelectionNode : {}
{
    <DOTP> (
      StopCountSelection()
      |
      StartCountSelection()
      |
      Lambda()
    ) <RPAREN>
}

void StopCountSelection() #StopCountNode : {}
{
    <lt> Expression()
}

void StartCountSelection() #StartCountNode : {}
{
    <gt> Expression()
}

void ArrayProjection() #ProjectionNode : {}
{
    <DOTB> ProjectionExpression() ( LOOKAHEAD(2) <COMMA> ProjectionExpression() )* <RBRACKET>
}

void MapProjection() #MapProjectionNode : {}
{
    <DOTC> ProjectionExpression() <COLON> ProjectionExpression() <RCURLY>
}

void ProjectionExpression() #void : {}
{
    LOOKAHEAD( LambdaLookahead() ) Lambda()
    |
    (Identifier() ( LOOKAHEAD(2) ProjectionMemberExpression() )*) #Reference(>1)
}

void ProjectionMemberExpression() #void : {}
{
    LOOKAHEAD(ProjectionMethodCall()) ProjectionMethodCall()
    |
    ProjectionMemberAccess()
}

void ProjectionMemberAccess() #void : {}
{
    LOOKAHEAD(<LBRACKET>) ArrayAccess()
    |
    LOOKAHEAD(<DOT>) IdentifierAccess()
    |
    LOOKAHEAD(<QDOT>) IdentifierAccess()
}

void ProjectionMethodCall() #void : {}
{
    (ProjectionMemberAccess() (LOOKAHEAD(<LPAREN>) Arguments())+) #MethodNode(>1)
}

void IteratorExpression() #void : {}
{
  LOOKAHEAD(<LPAREN> Expression() <COLON>) <LPAREN> Expression() <COLON> Lambda() <RPAREN> #EnumerationNode(2)
  |
  InlinePropertyExpression() #EnumerationNode(1)
}

void InlinePropertyExpression() #void : {}
{
  ValueExpression()
  ( LOOKAHEAD(<LCURLY>) (
    InlinePropertyAssignment() #InlinePropertyNode(2)
  ) )*

}

/***************************************
 *      Identifier & Literals
 ***************************************/

void Identifier(boolean top) :
{
    Token t;
}
{
    t=<IDENTIFIER> { jjtThis.setSymbol(top? checkVariable(jjtThis, t.image) : t.image); }
|
    t=<REGISTER> { jjtThis.setSymbol(t.image); }
}

void NamespaceIdentifier()  #NamespaceIdentifier :
{
    Token ns;
    Token id;
}
{
    ns=<IDENTIFIER> <COLON> id=<IDENTIFIER> { jjtThis.setNamespace(ns.image, id.image); }
}

void StringIdentifier() #Identifier :
{
    Token t;
}
{
    t=<STRING_LITERAL> { jjtThis.setSymbol(Parser.buildString(t.image, true));  }
}

void RemoveIdentifier() #Identifier :
{
    Token t;
}
{
    t=<REMOVE> { jjtThis.setSymbol(t.image); }
}

void Literal() #void :
{
   Token t;
}
{
  IntegerLiteral()
|
  FloatLiteral()
|
  BooleanLiteral()
|
  JxltLiteral()
|
  StringLiteral()
|
  RegexLiteral()
|
  ThisLiteral()
|
  NaNLiteral()
}

void ThisLiteral() #void : {}
{
    <THIS> #ThisNode
}

void NaNLiteral() #NumberLiteral : {}
{
    <NAN_LITERAL> { jjtThis.setReal("NaN"); }
}

void NullLiteral() : {}
{
    <NULL>
}

void BooleanLiteral() #void : {}
{
  <TRUE> #TrueNode
|
  <FALSE> #FalseNode
}

void IntegerLiteral() #NumberLiteral :
{
  Token t;
}
{
  t=<INTEGER_LITERAL>
  { jjtThis.setNatural(t.image); }
}


void FloatLiteral() #NumberLiteral:
{
  Token t;
}
{
  t=<FLOAT_LITERAL>
  { jjtThis.setReal(t.image); }
}

void StringLiteral() :
{
   Token t;
}
{
  t=<STRING_LITERAL>
  { jjtThis.setLiteral(Parser.buildString(t.image, true)); }
}


void JxltLiteral() #JxltLiteral :
{
   Token t;
}
{
   t=<JXLT_LITERAL>
   { jjtThis.setLiteral(Parser.buildString(t.image, true)); }
}

void RegexLiteral() :
{
   Token t;
}
{
  t=<REGEX_LITERAL>
  { jjtThis.setLiteral(Parser.buildRegex(t.image)); }
}

void EmptyListLiteral() #ArrayLiteral() : {}
{
   <LBRACKET> <ELLIPSIS> { jjtThis.setExtended(true); } <RBRACKET>
}

void ArrayLiteral() : {}
{
   <LBRACKET>
      (Expression() (LOOKAHEAD(<COMMA> Expression()) <COMMA> Expression() )*)? (LOOKAHEAD(2) <COMMA> <ELLIPSIS> { jjtThis.setExtended(true); })?
   <RBRACKET>
}

void ImmutableArrayLiteral() #ArrayLiteral() : {}
{
   <HBRACKET> (Expression() (LOOKAHEAD(<COMMA> Expression()) <COMMA> Expression() )*)? <RBRACKET> { jjtThis.setImmutable(true); }
}

void MapLiteral() : {}
{
    <LCURLY>
    (
        MapElement() ( <COMMA> MapElement() )*
    |
        <COLON>
    ) <RCURLY>
}

void MapElement() #void : {}
{
    LOOKAHEAD(<mult> <COLON> <ELLIPSIS>) <mult> <COLON> <ELLIPSIS> InlinePropertyExpression() #MapEnumerationNode(1)
    |
    MapEntry()
}

void MapEntry() : {}
{
    Expression() <COLON> Expression()
}

void ImmutableMapLiteral() #MapLiteral() : {}
{
    <HCURLY>
    (
        MapElement() ( <COMMA> MapElement() )*
    |
        <COLON>
    ) <RCURLY> { jjtThis.setImmutable(true); }
}

void SetLiteral() : {}
{
    <LCURLY> (Expression() ( <COMMA> Expression() )*)? <RCURLY>
}

void ImmutableSetLiteral() #SetLiteral : {}
{
    <HCURLY> (Expression() ( <COMMA> Expression() )*)? <RCURLY> { jjtThis.setImmutable(true); }
}

void InlinePropertyAssignment() : {}
{
    <LCURLY> (InlinePropertyBlock() ( <COMMA> InlinePropertyBlock() )* ) <RCURLY>
}

void InlinePropertyBlock() #void : {}
{
    (
      LOOKAHEAD(InlinePropertyName() <COLON>) InlinePropertyEntry()
      |
      LOOKAHEAD(<LBRACKET> Expression() <RBRACKET> <COLON>) InlinePropertyArrayEntry()
      |
      InlinePropertyNested() InlinePropertyAssignment() #InlinePropertyNode(2)
    )
}

void InlinePropertyName() #void : {}
{
    Identifier()
    |
    StringLiteral()
    |
    JxltLiteral()
}

void InlinePropertyNested() #void : {}
{
    ( (LOOKAHEAD(<LBRACKET>)ArrayAccess() | Identifier()) (LOOKAHEAD(2) MemberAccess() )*) #Reference()
}

void InlinePropertyEntry() : {}
{
    InlinePropertyName() <COLON> Expression()
}

void InlinePropertyArrayEntry() : {}
{
    <LBRACKET> Expression() <RBRACKET> <COLON> Expression()
}

/***************************************
 *      Functions & Methods
 ***************************************/

void EmptyMethod() #EmptyMethod() : {}
{
    <EMPTY> <LPAREN> <RPAREN>
}

void SizeMethod() #SizeMethod() : {}
{
    <SIZE> <LPAREN> <RPAREN>
}

void Arguments() #Arguments : {}
{
     <LPAREN> (Expression() (<COMMA> Expression())* )? <RPAREN>
}

void FunctionCallLookahead() #void : {}
{
    LOOKAHEAD(2) <IDENTIFIER> <COLON> <IDENTIFIER> <LPAREN>
    |
    LOOKAHEAD(2) <IDENTIFIER> <LPAREN>
    |
    LOOKAHEAD(2) <REGISTER> <LPAREN>
    |
    LOOKAHEAD(2) <REMOVE> <LPAREN>
}

void FunctionCall() #void : {}
{
    LOOKAHEAD(2) NamespaceIdentifier() Arguments() #FunctionNode(2)
    |
    LOOKAHEAD(2) Identifier(true) Arguments() #FunctionNode(2)
    |
    LOOKAHEAD(2) RemoveIdentifier() Arguments() #FunctionNode(2)
}

void Constructor() #ConstructorNode() : {}
{
  <NEW> <LPAREN> [ Expression() ( <COMMA> Expression() )* ] <RPAREN>
}

void Parameter() #void :
{
    Token t;
}
{
    t=<IDENTIFIER> { declareParameter(t); }
}

void Parameters() #void : {}
{
     <LPAREN> [Parameter() (LOOKAHEAD(2) <COMMA> Parameter())* (<ELLIPSIS> { declareVarArgSupport(); })? ] <RPAREN>
}


void LambdaLookahead() #void() : {}
{
  LOOKAHEAD(2) <FUNCTION> Parameters()
  |
  LOOKAHEAD(2) <FUNCTION> <LCURLY>
  |
  Parameters() ( <LAMBDA> | <LAMBDAE> )
  |
  Parameter() ( <LAMBDA> | <LAMBDAE> )
}

void Lambda() #JexlLambda() :
{
   pushFrame();
}
{
  LOOKAHEAD(2) <FUNCTION> Parameters() Block()
  |
  LOOKAHEAD(2) <FUNCTION> Block()
  |
  Parameters() ( <LAMBDA> Block() | <LAMBDAE> Expression() )
  |
  Parameter() ( <LAMBDA> Block() | <LAMBDAE> Expression() )
}



/***************************************
 *     References
 ***************************************/

void IdentifierAccess() #void :
{
    Token t;
}
{
    <DOT> (
        t=<DOT_IDENTIFIER> { jjtThis.setIdentifier(t.image); } #IdentifierAccess
    |
        t=<STRING_LITERAL> { jjtThis.setIdentifier(Parser.buildString(t.image, true)); } #IdentifierAccess
    |
        t=<JXLT_LITERAL> { jjtThis.setIdentifier(Parser.buildString(t.image, true)); } #IdentifierAccessJxlt
    |
        t=<REMOVE> { jjtThis.setIdentifier(t.image); } #IdentifierAccess
    )
    |
    <QDOT> (
        t=<DOT_IDENTIFIER> { jjtThis.setIdentifier(t.image); } #IdentifierAccessSafe
    |
        t=<STRING_LITERAL> { jjtThis.setIdentifier(Parser.buildString(t.image, true)); } #IdentifierAccessSafe
    |
        t=<JXLT_LITERAL> { jjtThis.setIdentifier(Parser.buildString(t.image, true)); } #IdentifierAccessSafeJxlt
    |
        t=<REMOVE> { jjtThis.setIdentifier(t.image); } #IdentifierAccessSafe
    )
}

void ArrayAccess() : {}
{
    (LOOKAHEAD(1) <LBRACKET> Expression() ( <COMMA> Expression() )* <RBRACKET>)+
}

void MemberAccess() #void : {}
{
    LOOKAHEAD(<LBRACKET>) ArrayAccess()
    |
    LOOKAHEAD(<DOT>) IdentifierAccess()
    |
    LOOKAHEAD(<QDOT>) IdentifierAccess()
}

void ReferenceExpression() #MethodNode(>1) : {}
{
    ( <LPAREN> Expression() <RPAREN> #ReferenceExpression(1) ) ( LOOKAHEAD(<LPAREN>) Arguments() )*
}

void PrimaryExpression() #void : {}
{
    LOOKAHEAD( LambdaLookahead() ) Lambda()
    |
    LOOKAHEAD( <LPAREN> ) ReferenceExpression()
    |
    LOOKAHEAD( <LCURLY> MapElement() ) MapLiteral()
    |
    LOOKAHEAD( <LCURLY> <COLON>) MapLiteral()
    |
    LOOKAHEAD( <HCURLY> MapElement() ) ImmutableMapLiteral()
    |
    LOOKAHEAD( <HCURLY> <COLON>) ImmutableMapLiteral()
    |
    LOOKAHEAD( <LCURLY> Expression() ) SetLiteral()
    |
    LOOKAHEAD( <LCURLY> <RCURLY> ) SetLiteral()
    |
    LOOKAHEAD( <HCURLY> Expression() ) ImmutableSetLiteral()
    |
    LOOKAHEAD( <HCURLY> <RCURLY> ) ImmutableSetLiteral()
    |
    LOOKAHEAD( EmptyListLiteral() ) EmptyListLiteral()
    |
    LOOKAHEAD( <LBRACKET> ) ArrayLiteral()
    |
    LOOKAHEAD( <HBRACKET> ) ImmutableArrayLiteral()
    |
    LOOKAHEAD( <NEW> ) Constructor()
    |
    LOOKAHEAD( FunctionCallLookahead() ) FunctionCall()
    |
    Identifier(true)
    |
    Literal()
}

void MethodCall() #void : {}
{
    LOOKAHEAD(<DOT> <SIZE>) (<DOT> <SIZE> <LPAREN> <RPAREN>) #SizeMethod(1)
    |
    LOOKAHEAD(<DOT> <EMPTY>) (<DOT> <EMPTY> <LPAREN> <RPAREN>) #EmptyMethod(1)
    |
    (MemberAccess() (LOOKAHEAD(<LPAREN>) Arguments())+) #MethodNode(>1)
}

void MemberExpression() #void : {}
{
    LOOKAHEAD(MethodCall()) MethodCall()
    |
    MemberAccess()
}

void ValueExpression() #void : {}
{
    NullLiteral()
    |
    ( PrimaryExpression() ( LOOKAHEAD(2) MemberExpression() )*) #Reference(>1)
}
